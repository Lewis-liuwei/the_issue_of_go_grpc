// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filter_message.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义数据结构
type Filter struct {
	MaxPriceUsd          float64  `protobuf:"fixed64,1,opt,name=max_price_usd,json=maxPriceUsd,proto3" json:"max_price_usd,omitempty"`
	MinCpuCores          uint32   `protobuf:"varint,2,opt,name=min_cpu_cores,json=minCpuCores,proto3" json:"min_cpu_cores,omitempty"`
	MinCpuGhz            float64  `protobuf:"fixed64,3,opt,name=min_cpu_ghz,json=minCpuGhz,proto3" json:"min_cpu_ghz,omitempty"`
	MinRam               *Memory  `protobuf:"bytes,4,opt,name=min_ram,json=minRam,proto3" json:"min_ram,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_02dd12c5821a9fa1, []int{0}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return m.Size()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetMaxPriceUsd() float64 {
	if m != nil {
		return m.MaxPriceUsd
	}
	return 0
}

func (m *Filter) GetMinCpuCores() uint32 {
	if m != nil {
		return m.MinCpuCores
	}
	return 0
}

func (m *Filter) GetMinCpuGhz() float64 {
	if m != nil {
		return m.MinCpuGhz
	}
	return 0
}

func (m *Filter) GetMinRam() *Memory {
	if m != nil {
		return m.MinRam
	}
	return nil
}

func init() {
	proto.RegisterType((*Filter)(nil), "study.proto.Filter")
}

func init() { proto.RegisterFile("filter_message.proto", fileDescriptor_02dd12c5821a9fa1) }

var fileDescriptor_02dd12c5821a9fa1 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xcb, 0xcc, 0x29,
	0x49, 0x2d, 0x8a, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x2e, 0x2e, 0x29, 0x4d, 0xa9, 0x84, 0x70, 0xa4, 0x44, 0x72, 0x53, 0x73, 0xf3, 0x8b,
	0x2a, 0x51, 0x95, 0x28, 0xcd, 0x63, 0xe4, 0x62, 0x73, 0x03, 0xeb, 0x15, 0x52, 0xe2, 0xe2, 0xcd,
	0x4d, 0xac, 0x88, 0x2f, 0x28, 0xca, 0x4c, 0x4e, 0x8d, 0x2f, 0x2d, 0x4e, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0c, 0xe2, 0xce, 0x4d, 0xac, 0x08, 0x00, 0x89, 0x85, 0x16, 0xa7, 0x80, 0xd5, 0x64,
	0xe6, 0xc5, 0x27, 0x17, 0x94, 0xc6, 0x27, 0xe7, 0x17, 0xa5, 0x16, 0x4b, 0x30, 0x29, 0x30, 0x6a,
	0xf0, 0x06, 0x71, 0xe7, 0x66, 0xe6, 0x39, 0x17, 0x94, 0x3a, 0x83, 0x84, 0x84, 0xe4, 0xb8, 0xb8,
	0x61, 0x6a, 0xd2, 0x33, 0xaa, 0x24, 0x98, 0xc1, 0xa6, 0x70, 0x42, 0x54, 0xb8, 0x67, 0x54, 0x09,
	0xe9, 0x70, 0xb1, 0x83, 0xe4, 0x8b, 0x12, 0x73, 0x25, 0x58, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x84,
	0xf5, 0x90, 0xdc, 0xa9, 0xe7, 0x0b, 0x76, 0x66, 0x10, 0x5b, 0x6e, 0x66, 0x5e, 0x50, 0x62, 0xae,
	0x93, 0xc8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x14, 0x53, 0x41, 0x52, 0x12, 0x1b, 0x58, 0xad, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x07, 0xec, 0xf0, 0xf8, 0x00, 0x00, 0x00,
}

func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Filter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinRam != nil {
		{
			size, err := m.MinRam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilterMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinCpuGhz != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinCpuGhz))))
		i--
		dAtA[i] = 0x19
	}
	if m.MinCpuCores != 0 {
		i = encodeVarintFilterMessage(dAtA, i, uint64(m.MinCpuCores))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxPriceUsd != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxPriceUsd))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilterMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilterMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxPriceUsd != 0 {
		n += 9
	}
	if m.MinCpuCores != 0 {
		n += 1 + sovFilterMessage(uint64(m.MinCpuCores))
	}
	if m.MinCpuGhz != 0 {
		n += 9
	}
	if m.MinRam != nil {
		l = m.MinRam.Size()
		n += 1 + l + sovFilterMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFilterMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilterMessage(x uint64) (n int) {
	return sovFilterMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilterMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriceUsd", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxPriceUsd = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCpuCores", wireType)
			}
			m.MinCpuCores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCpuCores |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCpuGhz", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinCpuGhz = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilterMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilterMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinRam == nil {
				m.MinRam = &Memory{}
			}
			if err := m.MinRam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilterMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilterMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilterMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilterMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilterMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilterMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilterMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilterMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilterMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilterMessage = fmt.Errorf("proto: unexpected end of group")
)
